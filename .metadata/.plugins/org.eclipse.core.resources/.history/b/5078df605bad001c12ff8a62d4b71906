package org.project.controller;

import java.util.Date;
import java.util.List;
import java.util.Optional;

import org.formation.controller.ArrayList;
import org.formation.controller.Tutorial;
import org.project.model.CD;
import org.project.model.DVD;
import org.project.model.Document;
import org.project.model.Livre;
import org.project.repository.CDRepository;
import org.project.repository.DVDRepository;
import org.project.repository.DocumentRepository;
import org.project.repository.LivreRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/mediatheque/catalogue")
public class DocumentRestController {

	@Autowired
	private DocumentRepository documentRepository; 

	@Autowired
	private CDRepository cdRepository; 

	@Autowired
	private DVDRepository dvdRepository; 

	@Autowired
	private LivreRepository livreRepository;  


	@GetMapping
	public List<Document> findAllDocument () {
		return documentRepository.findAll(); 

	}

	@GetMapping("/CD")
	public List<CD> findAllCD () {
		return cdRepository.findAll(); 

	}


	@GetMapping("/Livre")
	public List<Livre> findAllLivre () {
		return livreRepository.findAll(); 	
	}

	@GetMapping("/DVD")
	public List<DVD> findAllDvd () {
		return dvdRepository.findAll(); 
	}


	
	 @GetMapping("/tutorials")
	  public ResponseEntity<List<Tutorial>> getAllTutorials(@RequestParam(required = false) String title) {
	    try {
	      List<Tutorial> tutorials = new ArrayList<Tutorial>();
	      if (title == null)
	        tutorialRepository.findAll().forEach(tutorials::add);
	      else
	        tutorialRepository.findByTitleContaining(title).forEach(tutorials::add);
	      if (tutorials.isEmpty()) {
	        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
	      }
	      return new ResponseEntity<>(tutorials, HttpStatus.OK);
	    } catch (Exception e) {
	      return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
	    }
	  }


	//Afficher tous les documents, avec un titre contenant une chaîne particulière
	//avec une date de parution ou avec le type document ( CD/DVD/LIVRE)
	//Pour tester sur le navigateur : http://localhost:8080/mediatheque/catalogue/search?q=ga, ga c'est la chaine recherchée!
	//, @RequestParam Date requestDateParution, @RequestParam String typeDocument
//	@GetMapping("/search")
//	public Optional<Document>  searchDocumentByString(@RequestParam String q) {
//		return documentRepository.findAllByTitreContainingIgnoreCase(q); 
//		
//	}
	 @GetMapping("")
	 public List<Document> getAllDocuments(@RequestParam (required = false) String titre, @RequestParam Date DateParution, @RequestParam String TypeDocument) {
		 
		 try {
			 List<Document> document = new ArrayList<>(); 
			 if ( titre == null ) {
				 
			 }
		 }
	 }

	 
	 
	
	// ajouter un nouveau document
		@PostMapping
		public Document addDocumentToCatalogue(@RequestBody Document document) {
			documentRepository.save(document); 
			return document; 
		}





}
