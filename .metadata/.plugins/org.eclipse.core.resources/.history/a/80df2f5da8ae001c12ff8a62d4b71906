package org.project.service;

import java.util.HashSet;
import java.util.Set;

import org.project.handlerException.UserNotFoundException;
import org.project.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
public class UserAuthentificationService implements UserDetailsService {

	@Autowired
	UserRepository userRepository; 
	
	@Override
	@Transactional(readOnly = true)
	public UserDetails loadUserByUsername(String username) throws UserNotFoundException {
		// TODO Auto-generated method stub
		
		User user = userRepository.findByLogin(username).
		Set<GrantedAuthority> grantedAuthorities = new HashSet<>();
		grantedAuthorities.add(new SimpleGrantedAuthority("ROLE_USER"));
		return new User(user.getUsername(), "{noop}" + user.getPassword(), grantedAuthorities);
	}

}

@Override
@Transactional(readOnly = true)
public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {



if (username.trim().isEmpty()) {
throw new UsernameNotFoundException("username is empty");
}



User user = userService.findByLogin(username);



if (user == null) {
throw new UsernameNotFoundException("User " + username + " not found");
}



return new org.springframework.security.core.userdetails.User(user.getLogin(), "{noop}" + user.getPwd(),
getGrantedAuthorities(user));
}



private List<GrantedAuthority> getGrantedAuthorities(User user) {



List<GrantedAuthority> grantedAuthorities = new ArrayList<GrantedAuthority>();
grantedAuthorities.add(new SimpleGrantedAuthority("ROLE_USER"));
if (user.getLogin().equals("ryan@gmail.com")) {
grantedAuthorities.add(new SimpleGrantedAuthority("ROLE_ADMIN"));
}
return grantedAuthorities;
}