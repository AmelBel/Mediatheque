package org.project.service;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.persistence.EntityNotFoundException;

import org.project.model.Document;
import org.project.model.DocumentRepository;
import org.project.model.Emprunt;
import org.project.model.EmpruntRepository;
import org.project.model.User;
import org.project.model.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.ResponseStatus;

@Service
@Transactional
public class MediathequeServiceImplement implements IMediatheque {
	@Autowired
	private DocumentRepository documentRepository; 

	@Autowired
	private EmpruntRepository empruntRepository; 
	
	@Autowired
	private UserRepository userRepository; 

	@Override
	public List<Document> consulterDocument() {

		return documentRepository.findAll();
	}

	@Override
	public Emprunt effectuerEmprunt (User user, List<Document> documents) throws Exception {
		
		
	        List<Media> mEmprunt = new ArrayList<>();
	        for (Media media : medias) {
	            Media m = mediaRepository.findById(media.getId()).orElseThrow(() -> new EntityNotFoundException());
	            if (m.getQuantite() == 0) {
	                throw new Exception();
	            }
	            m.setQuantite(m.getQuantite() - 1);
	            mEmprunt.add(m);
	        }

	 

	            Emprunt e = new Emprunt();
	            e.setMedias(mEmprunt);
	            e.setMember(member);
	            e.setDateEmprunt(LocalDate.now());
	            e.setDateLimiteRetour(LocalDate.now().plusDays(7));
	            if(countEmpruntByMember(member.getId()) < 3) {
	                empruntRepository.save(e);
	            } else {
	                throw new Exception();
	            }
	            for ( Media media : mEmprunt ) {
	                mediaRepository.save(media);
	            }

	 

	        
	        return e ;
	    }
		
		
		
	        List<Document> DocumentEmprunt = new ArrayList<>();
	        
	        for (Document document : documents) {
	        	
	            Document dr = documentRepository.findById(document.getId()).orElseThrow(() -> new Exception());
	            if (dr.getNombreExemplaire() == 0) {
	                throw new Exception();
	            }
	            dr.setNombreExemplaire(dr.getNombreExemplaire()-1);
	            DocumentEmprunt.add(dr);
	        }
	 
	            Emprunt e = new Emprunt();
	            e.setMedias(mEmprunt);
	            e.setMember(member);
	            e.setDateEmprunt(LocalDate.now());
	            e.setDateLimiteRetour(LocalDate.now().plusDays(7));
	            if(countEmpruntByMember(member.getId()) < 3) {
	                empruntRepository.save(e);
	            } else {
	                throw new Exception();
	            }
	            for ( Media media : mEmprunt ) {
	                mediaRepository.save(media);
	            }
	 
	        
	        return e ;
	    }
		
		
		
		emprunt.setDateEmprunt(new Date());
		emprunt.setDocuments(documents);
		return empruntRepository.save(emprunt); 


	}

	@Override
	public void restituerEmprunt(User user, Emprunt emprunt) {
		List<Document> documents = consulterDocument();  

		for (Document docDisponible: documents) {
			for (Document docEmprunter: emprunt.getDocuments() ) {
				if ((docDisponible.getId()== docEmprunter.getId())) {
					docDisponible.setNombreExemplaire(docDisponible.getNombreExemplaire()+1);
				}
			}
		}

		empruntRepository.save(emprunt); 
	}

//	@Override
//	public List<Emprunt> visualiserEmprunt(User user, Emprunt emprunt) {
//		
//		return empruntRepository.visualiserEmprunt(user, emprunt); 
//	}

}
