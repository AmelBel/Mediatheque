package org.formation.controller;

import java.util.List;

import org.formation.model.Member;
import org.formation.model.MemberRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.fasterxml.jackson.annotation.JsonView;

@RestController
@RequestMapping("/api/members")
public class MemberRestController {

	@Autowired
	private MemberRepository memberRepository;

	@GetMapping
	@JsonView(MemberViews.AllMembers.class)
	public List<Member> findAllMember() {
		return memberRepository.findAll();
	}

	@GetMapping("/{id}")
	@JsonView(MemberViews.OneMember.class)
	public Member finOne(@PathVariable Long id) throws MemberNotFoundExeption {
		return memberRepository.fullLoad(id).orElseThrow(() -> new MemberNotFoundExeption("ID :" + id));
	}

	@DeleteMapping("/{id}")
	public ResponseEntity<Void> deleteById(@PathVariable Long id) throws MemberNotFoundExeption {
		
		Member member = memberRepository.findById(id).orElseThrow(() -> new MemberNotFoundExeption("ID :" + id));

		memberRepository.delete(member);

		return new ResponseEntity<>(HttpStatus.NO_CONTENT);
	}
	
	//Creation d'un membre
	@PostMapping
	@JsonView(MemberViews.OneMember.class)
	public ResponseEntity<Member> createMember(@RequestBody Member member) {
		
		member = memberRepository.save(member);
		return new ResponseEntity<Member>(member, HttpStatus.CREATED); 
	} 
	
	//Mettre à jour d'un membre
	@PutMapping
	@JsonView(MemberViews.OneMember.class)
	public Member upDateMember(@RequestBody Member member) throws MemberNotFoundExeption {
		memberRepository.findById(member.getId()).orElseThrow(() -> new MemberNotFoundExeption("ID :" + member.getId()));
		memberRepository.save(member); 
		return member;
	}
	
	//afficher les membres dont le nom complet (prenom + nom) contenant un chaîne particulière
	// pour voir sur le web on test sur l navigateur : http://localhost:8080/api/members/search?q=ga, ga c'est la chaine recherché!
	@GetMapping("/search")
	@JsonView(MemberViews.OneMember.class)
	public List<Member> searchMemberByString (@RequestParam String q) {
		
		return memberRepository.findByNomOrPrenomContainingIgnoreCase(q, q); 
	}
	
}
